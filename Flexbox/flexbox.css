/* 
? ...INTRODUCTION...
* Flexbox 2017 yılında eklendi. CSS'de normal şartta kullanılan "float" , "position" , "display" özellikleri ile yapılan konumlandırma ve elemanların varsayılan özelliklerine bir alternatiftir.
* Özellik başlıca olarak "display: flex;" ile başlar.
* Öncelikle bir "flex container" gerekiyor. Bu her bir "flex item" elementini kapsar.
* "flex item" illa ki "div" olmak zorunda değildir. "a" , "p" olsun farketmez, "flex container" elemanına "display: flex;" dendiği anda bunlar artık birer "flex item" oluyor.
* "flex" ile birçok özellik varsayılan olarak geliyor. Arka kısımda birçok işlem yapılıyor.
! Flex Versus İnline Flex : "Flex" blok düzeyinde bir eleman denebilir. "inline-flex" ise elemanlar "flex" olarak konumlanırlar fakat her bir eleman "inline" olarak davranır ve sahip oldukları alan kadar yer kaplarlar.
* Özellikler 2 gruba ayrılabilir. Bunlar "container" ve her bir "item" elemanına verilen özelliklerdir.
*/
body {
  font-family: Verdana, Geneva, Tahoma, sans-serif;
  background: #f3f3f3;
  height: 300vh;
}
/* ***FLEX CONTAİNER PROPERTİES*** */
/*
 * "display: flex;"  , "flex-direction: row / row-reverse / column / column-reverse"
 ! "main axis" yönünü Tanımlamak için kullanılır.
 ? "row" ile elemanlar soldan sağa sıralanır.(main axis "soldan sağa" olur) (Default gelir.)
 ? "column" ile elemanlar yukarıdan aşağı sıralanır.(main axis "yukarından aşağı" olur)
 ? "row-reverse" ile elemanlar sağdan sola sıralanır.(main axis "sağdan sola" olur)
 ? "column-reverse" ile elemanlar aşağıdan yukarı sıralanır.(main axis "aşağıdan yukarı" olur)
*/
.container {
  border: 5px solid red;
  display: flex;
  flex-direction: row;
  /* flex-direction: column; */
  /* flex-direction: row-reverse; */
  /* flex-direction: column-reverse; */
  gap: 25px 50px;
  flex-wrap: wrap;
}
.box {
  padding: 30px;
  text-align: center;
  font-size: 35px;
  color: #f3f3f3;
  /* margin: 0 10px 0 10px; */
}
.box-1 {
  background: #581f18;
}
.box-2 {
  background: #f0a202;
}
.box-3 {
  background: #d95d39;
}
.box-4 {
  background: #202c59;
}
.box-5 {
  background: #51cb20;
}

/* 
* "flex-wrap: nowrap / wrap / wrap-reverse
! allow items to wrap into a new line if they are too large
? "wrap" ile sığmayan içerik altta yeni bir satırda sıralanmaya başlar. Elemanlar "container" içinde kalır.
? "nowrap" ile sığmayan içerik yeni bir satıra alınmaz. Elemanlar "containerden" taşar.
? "wrap-reverse" ile sığmayan içerik üstten başlanarak sıralanmaya başlar. Elemanlar "container" içinde kalır.
*/
.container11 {
  border: 5px solid red;
  display: flex;
  flex-direction: row;
  /* flex-wrap: nowrap; */
  /* flex-wrap: wrap; */
  flex-wrap: wrap-reverse;
}
.box11 {
  padding: 30px;
  text-align: center;
  font-size: 35px;
  color: #f3f3f3;
  /* margin: 0 10px 0 10px; */
}

/* 
!!! "flex-flow" kısaltması "flex-direction" ve "flex-wrap" özelliklerinin kısaltması olarak kullanılabilir.
!!! Örnek: "flex-flow: row wrap;" , "flex-flow: column nowrap;"
*/

/* 
* "justify-content: flex-start / flex-end / center / space-between / space-around / space-evenly
! to align items along main axis (horizontally by default)
? "flex-start" ile container başında (default) 
? "flex-end" ile container sonunda
? "center" ile container ortasında sıralanır. Sayfa küçüldükçe sol ve sağdaki boşluklar azalır. Elemanlar sabit kalır.
? "space-between" elemanlar arasında eşit boşluk olacak şekilde sıralanır. İlk ve son eleman container'e sıfır olacak şekilde (margin yoksa) başlar. Sayfa büyüyüp küçüldükçe boşluklar da ona göre büyür veya küçülür.
? "space-around"  elemanlar her birinin solunda ve sağında eşit boşluk olacak şekilde sıralanıır. İlk ve son eleman container'e sıfır olmaz. (Elemanlar arasındaki boşluğun yarısı olacak şekilde sıralanır.) Sayfa büyüyüp küçüldükçe boşluklar da ona göre büyür veya küçülür.
? "space-evenly" elemanlar solundan ve sağından (ilk eleman solu veya son eleman sağı dahil) eşit boşluk olacak şekilde sıralanır.
*/
.container12 {
  border: 5px solid red;
  display: flex;
  /* justify-content: center; */
  /* justify-content: flex-start; */
  /* justify-content: flex-end; */
  /* justify-content: space-between; */
  justify-content: space-around;
  /* justify-content: space-evenly; */
}
.box12 {
  padding: 30px;
  text-align: center;
  font-size: 35px;
  color: #f3f3f3;
  /* margin: 0 10px 0 10px; */
}
/* 
* "align-items: stretch / flex-start / flex-end / center / baseline
! to align items along "cross-axis" (vertically by default)
? strecth (default): Element yüksekliği en fazla olan "flex item" elemente göre "container" yüksekliği ayarlanır (Unless "parent" does not have a fixed height)  ve diğer elemanları yüksekliği ne olursa olsun bu duruma ayak uydururlar. Yükseklik atanan "flex item" öğeler var ise atanan yükseklikler geçerlidir.
? flex-start: elemanlar yukarıda hizzalanır.
? flex-end: elemanlar aşağıda hizzalanır. 
? center: "height" atanmamış öğeler dışındakiler kendilerinin dikey eksen ortasında ortalar.
? baseline: elementlerin içeriklerin tam alt çizgisinden geçecek şekilde hizzalar. 
*/
.container13 {
  border: 5px solid red;
  display: flex;
  /* align-items: stretch; */
  /* align-items: flex-start; */
  /* align-items: flex-end; */
  /* align-items: center; */
  align-items: baseline;
}
.box13 {
  padding: 30px;
  text-align: center;
  font-size: 35px;
  color: #f3f3f3;
  /* margin: 0 10px 0 10px; */
}
.container13 .box-3 {
  height: 200px;
}
.container13 .box-4 {
  height: 300px;
}
.container13 .box-1 {
  height: 100px;
  font-size: 50px;
}
/* 
!!! "justify-content" ve "align-items" özellikleri eksenlerle alakalıdır. Örneklerde "flexbox direction" "row" olduğu için "justify-content" yataydan , "align-items" dikeyden sorumlu idi. Fakat "flexbox direction" "column" yapıldığı zaman bu durum tam tersi olacaktır.
!!!
*/
/* 
* "align-content: stretch / flex-start / flex-end / center / space-between / space-around
! Only applies when there are multiple lines (flex-wrap: wrap)
? strecth (default): Satıra sığmayan elemanlar aşağı satıra kayar ve tüm elemanlar süner.
? flex-start: Satıra sığmayan içerik ilk satırın hemen altında en üstten devam eder. 
? flex-end: Satıra sığmayan elemanlar en aşağıda sıralanır. İlk elemanlar bir üst satıra kayar. 
? center: Satıra sığmayan elemanlar sayfa ortasında olacak şekilde aşağı kayar.
? space-between: Satıra sığmayan elemanlar eşit aralıklı şekilde sıralanır. İlk sıra ve son sıra sınıra dayanır.
? space-around: Satıra sığmayan elemanlar x-2x-2x-...-x aralıkları ile sıralanır.
*/
.container14 {
  border: 5px solid red;
  height: 50vh;
  display: flex;
  flex-wrap: wrap;
  /* align-content: stretch; */
  /* align-content: flex-start; */
  /* align-content: flex-end; */
  /* align-content: center; */
  /* align-content: space-between; */
  align-content: space-around;
}
.box14 {
  padding: 30px;
  text-align: center;
  font-size: 35px;
  color: #f3f3f3;
  /* margin: 0 10px 0 10px; */
}

/* 
* "gap: 15px 20px" : shorthand for "row-gap" and "column-gap"
* Property "row-gap" için bir değer ve ardından isteğe bağlı "column-gap" için bir değer olarak belirtilir. "column-gap" belirtilmesse "row-gap" ile aynı değeri aldığı varsayılır.
* "px" , "em" , "rem" , "%" , "vmin" gibi değerler ayrıca "calc(10% - 80px) gibi fonksiyon değeri alabilir.
! Create space between items, without using margin.
*/

.container15 {
  border: 5px solid red;
  height: 50vh;
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  /* gap: 10%; */
  /* gap: calc(15% - 10px); */
  gap: 20px;
}
.box15 {
  padding: 30px;
  text-align: center;
  font-size: 35px;
  color: #f3f3f3;
  /* margin: 0 10px 0 10px; */
}

/* ***FLEX ITEMS PROPERTİES*** */
/* 
* "order: -5 / -1 / 0 / 1 / 1000 : "flex" veya "grid" içinde item sıralamasını belirlemeye yarar.
* Her item sırası "default" olarak "0" gelir. Negatif sayılar sıralamada etkilidir ve "0"dan önce gelirler.
* Sıralama en büyük sayı sonda en küçük sayı başta olacak şekilde sıralanır.
! Controls order of the items.


* "align-self: auto / stretch / flex-start / flex-end / center / baseline
! To OVERWRITE align-items for individual flex items 

*/
.container16 {
  border: 5px solid red;
  height: 50vh;
  display: flex;
  flex-wrap: wrap;
  align-items: center;
}
.box16 {
  padding: 30px;
  text-align: center;
  font-size: 35px;
  color: #f3f3f3;
  /* margin: 0 10px 0 10px; */
}

.box-11 {
  order: 5;
  align-self: stretch;
}
.box-44 {
  order: 3;
  align-self: flex-end;
}
.box-99 {
  order: -1;
  align-self: auto;
}

/* 
* "flex-grow: 0 / 1 / any number". 
! To allow an element to grow. ( Default value = 0 )
* Verilen sayı büyüme faktörü olarak geçer ve büyüme oranını belirlemede kullanılır.
* Negatif sayılar kullanılmaz. Tek bir sayı girilmelidir. Ondalık bir sayı olabilir.

* "flex-shrink: 1 / 0 / any number".
! To allow an element to shrink. ( Default value = 1 )
* Verilen sayı küçülme faktörü olarak geçer ve küçülme oranını belirlemede kullanılır.
* Negatif sayılar kullanılmaz. Tek bir sayı girilmelidir. Ondalık bir sayı olabilir.

? "grow" yada "shrink" "main axis" üzerinde gerçekleşir. "main axis" "flex-direction"a bağlı olarak "width" yada "height" olabilir.

* "flex-basis: auto / 10px / 5rem / 3em / 50% / max-content / min-content / fit-content / content" : "flex item"in başlangıç "main size" değerini belirtir. "Box-sizing: border-box" ayarlanmadığı sürece "content" göz önüne alınır.
! To define an item's width, instead of the "width property"

?? "box-sizing: border-box" kullanmak çoğu zaman iyidir..

!!! In case both "flex-basis" (other than "auto") and "width" (or "height" in case of "flex-direction: column;") are set for an element, "flex-basis" has priority!!!

!!! Automatically size based on the flex item's content -> "flex-basis: content;"

* "flex: 0 1 auto" : "flex-grow" , "flex-shrink" , "flex-basis" üçlemesi için kısayoldur.
*  Keyword values: 
   ! flex: auto;  (equal to "flex: 1 1 auto;") 
   ! flex: initial;  (equal to "flex: 0 1 auto;")
   ! flex: none;  (equal to "flex: 0 0 auto;")

* One value, unitless number: flex-grow
   ! "flex-shrink" value taken as "1"
   ! "flex-basis" is then equal to "0" 
   ? Örn: "flex: 2;" -> "flex: 2 1 0" 

 * One value, width/height: flex-basis 
   ! flex: 10em;
   ! flex: 30%;
   ! flex: min-content;
   ! "flex-grow" value taken as "1"
   ! "flex-shrink" is then equal to "1"
   ? Örn: "flex: 30px;" -> "flex: 1 1 30px;"
   
 * Two values: flex-grow | flex-basis 
   ! flex: 1 30px;

 * Two values: flex-grow | flex-shrink 
   ! flex: 2 2;

 * Three values: flex-grow | flex-shrink | flex-basis 
   ! flex: 2 2 10%;
*/
/* 
!!! Flexbox'da sol ve sağ "padding" kullanılması önerilmez.
!!! "margine" değerine nasıl sahip olacaz?? "calc" fonksiyonunu kullanarak... 
    ? Örn: 0 0 calc(25% - 1rem); + space evenly...


*/

/* ?? NESTED FLEXBOX CSS ?? */
header {
  background: purple;
  height: 100px;
}

.nested {
  text-align: center;
  color: white;
  line-height: 100px;
  margin: 0;
}

article {
  padding: 10px;
  margin: 10px;
  background: aqua;
}

/* Add your flexbox CSS below here */

section {
  display: flex;
}

article {
  flex: 1 200px;
}

article:nth-of-type(3) {
  flex: 3 200px;
  display: flex;
  flex-flow: column;
}

article:nth-of-type(3) div:first-child {
  flex: 1 100px;
  display: flex;
  flex-flow: row wrap;
  align-items: center;
  justify-content: space-around;
}

button {
  flex: 1 auto;
  margin: 5px;
  font-size: 18px;
  line-height: 1.5;
}
