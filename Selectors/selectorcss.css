/* 
! Type Class and Id Selectors:

* "Element Selector" kısaca Tag Name Selector yada Type Selector olarak geçen etiket isimlendirmesi ile yapılan biçimlendirmedir.
* "Class Selector" HTML dökümanı içinde söz konusu class atanmış olduğu tüm etiketlere uygulanır.
* "Class Selector" "." karakteri ile başlar.
* Aynı "Class" öğesi sayfada birden fazla elemente uygulanabilir. Farklı etiketlere aynı biçimlendirme uygulama durumunda kullanılır.
* Bunun dışında bir elemente(etikete) birden fazla Class Tanımlanabilir.
* Örnekler:

! All elements with class="spacious" 
? .spacious {
?  margin: 2em;
?  }

! All "li" elements with class="spacious" 
?  li.spacious {
?  margin: 2em;
?  }

! All "li" elements with a class list that includes both "spacious" and "elegant" 
? For example, class="elegant retro spacious" 
?  li.spacious.elegant {
?  margin: 2em;
?  }

* "ID Selector" herhangi bir elemente atanan o sayfa için tek olması gereken ID ile çağrılır.
* "ID Selector" "#" ile başlar.
* Farklı etiketlere aynı ID verilmesi durumunda geçersiz bir kod oluşturma ve ilginç davranışlar ortaya çıkarma dışında bir problem olmasa bile sayfada gördüğü ilk ID elemanına tanımlanan CSS'i uygular alttakine karışmaz.

? "Universal Selector" "*" [asteriks] ile çağırılır. Döküman içindeki herşeyi seçer. 
? "Universal Selector" renk verme gibi biçimlendirmeler dışında genel olarak browserda default olarak genel bazı özellikleri kaldırmak için kullanılır.
? https://meyerweb.com/eric/tools/css/reset/ sitesinde "resetleme" için bir CSS kod parçacığı bulunmaktadır. Bu kodu revize ederek ve kendi kullanımımıza uygun hale getirerek çeşitli browser default özelliklerden kurtulabiliriz.

* "Selector List" liste şeklinde de birden çok elemente aynı özellik verilecekse kullanılabilir. Elementler arası "," kullanılması gerektir. Virgül sonrası white-space kullanılabilir. Yani virgülden sonraki boşluk herhangi bir etki yapmaz. Hatta kafa karışıklığı engellemek için selectorler alt alta da sıralabilir. Burada dikkat edilmesi gereken şeylerden biri liste elemanlarından herhangi birinin yazımı yanlış olup kod çalışmazsa liste içerisindeki diğer elemanların yazımının doğruluğuna bakılmaksızın hiçbiri oraya yazılan CSS özelliklerini almayacaktır.

* "Descendant Combinator" genellikle tek bir boşluk ile temsil edilir. 
* İkinci seçici, birinci seçiciyle eşleşen bir parent (parent , parent's parent , parent's parent's parent) olduğu durumda seçilir.

* "Child Combinator" ">" işareti iki seçici arasına yerleştirilir. 
* Yalnızca, birinci seçicinin eşleştirdiği öğelerin direct child'ı olan ikinci seçici tarafından eşleşen öğelerle eşleşir. 
* İkinci seçici tarafından eşleşen öğeler, birinci seçici tarafından eşleşen öğelerin direct child'ları olma zorunluluğu bu kombinasyonu descendant kombinasyonundan daha katı yapar. 

* "Adjacent Combinator" "+" işareti iki seçiciyi ayırır.
* İkinci seçici yalnızca birinci seçiciyi hemen takip ederse ve her ikisi de aynı parentın childları ise eşleşir.

* "General Sibling Combinator" "~" işareti iki seçiciyi ayırır.
* İkinci selector birinci selectorü takip eden (not necessarily immediately) aynı parentın childları olan tüm yinelemelerle eşlerşir. 

* Attribute Selector" belirli bir özniteliğin varlığına veya değerine göre öğeleri eşleştirir.
* Örnekler:
/* 
! <a> elements with a "title" attribute 
?  a[title] {
?   color: purple;
?   }
  
! <a> elements with an href matching "https://example.org" 
? a[href="https://example.org"] {
?    color: green;
?  }
  
! <a> elements with an href containing "example" 
? a[href*="example"] {
?    font-size: 2em;
?  }
  
! <a> elements with an href ending ".org" 
? a[href$=".org"] {
?    font-style: italic;
?  }
  
! <a> elements whose class attribute contains the word "logo" 
? a[class~="logo"] {
?    padding: 2px;
?  }

? a[href*='google' i] {
? color: magenta;
?  }

? input[type='password'] {
?  color: greenyellow;
?   }

! [attr]
! Represents elements with an attribute name of attr.

! [attr=value]
! Represents elements with an attribute name of attr whose value is exactly value.

! [attr~=value]
! Represents elements with an attribute name of attr whose value is a whitespace-separated list of words, one of which is exactly value.

! [attr|=value]
! Represents elements with an attribute name of attr whose value can be exactly value or can begin with value immediately followed by a hyphen, - (U+002D). It is often used for language subcode matches.

! [attr^=value]
! Represents elements with an attribute name of attr whose value is prefixed (preceded) by value.

! [attr$=value]
! Represents elements with an attribute name of attr whose value is suffixed (followed) by value.

! [attr*=value]
! Represents elements with an attribute name of attr whose value contains at least one occurrence of value within the string.

! [attr operator value i]
! Adding an i (or I) before the closing bracket causes the value to be compared case-insensitively (for characters within the ASCII range).
*/

/* 
* "Pseudo-Classes" is a keyword added to a selector that specifies a special state of the selected element.
* Some important "Pseudo-Classes:

! :link --> Ziyaret edilmemiş olan bir "link" için kullanılır.
! To style links appropriately, put the ":link" rule before all other "link-related rules", as defined by the LVHA-order: :link — :visited — :hover — :active.

? :visited --> Ziyaret edilmiş "link" için verilecek CSS özelliklerini gösterir.

! :hover       --> Bu selector imleç element üstüne gelindiği fakat basılmadığı durumda aktifleşecek öğeleri içerir.

? :active      --> Kullanıcı öğeye tıklayıp tuşu bırakmadığı zaman aktifleşecek öğelerle eşleşir.

! :checked     --> Bu selector "input type="radio" , input type="checkbox" yada "option" içindeki "select" elementi işaretlendiği zaman aktifleşecek öğeleri içerir

? :first-child --> Bir grup kardeş eleman içerisinden ilkini temsil eder.

! nth-child()  --> elementleri bir grup içerisindeki pozisyonlarına göre eşleştirir.

? tr:nth-child(odd) or tr:nth-child(2n+1) Represents the odd rows of an HTML table: 1, 3, 5, etc.

! tr:nth-child(even) or tr:nth-child(2n) Represents the even rows of an HTML table: 2, 4, 6, etc.

? :nth-child(-n+3) Represents the first three elements. [=-0+3, -1+3, -2+3]

! :nth-child(7) Represents the seventh element.

? nth-of-type()--> Aynı türdeki siblingsler (etiket adı) arasındaki konumlarına göre öğeleri eşleştirir.

* Örnekler:
! Odd paragraphs 
? p:nth-of-type(2n+1) {
?  color: red;
?  }

! Even paragraphs 
? p:nth-of-type(2n) {
?  color: blue;
?  }

! First paragraph 
? p:nth-of-type(1) {
?  font-weight: bold;
?  }

! This will match the 3rd paragraph as it will match elements which are 2n+1 AND have a class of fancy.
! The second paragraph has a class of fancy but is not matched as it is not :nth-of-type(2n+1) 
? p.fancy:nth-of-type(2n+1) {
?  text-decoration: underline;
? }

! "Click Here" yazısı üstüne gelindiğinde altındaki içeriği görünür yapmak istiyoruz.

?   div:hover p {
?      display: block;
?   }
?   p {
?      display: none;
?   }

* "Pseudo-Elements" Seçiciye eklenerek seçili öğelerin belirli bir bölümüne stil vermemizi sağlayan öğelerdir.
* Bir selectorde yalnızca bir "Pseudo-Element" kullanabilir. Söz dizisinde basit selectorlerden sonra gelmelidir.

? ::after (:after)  --> Elementin son child olan elemente etkir. Kozmetik amaçlıdır. Default olarak "inline" elemandır.

! ::before (:before) --> Elementin ilk child olan elemente etkir. Kozmetik amaçlıdır.

* Bir paragraf yada bir elementin başına veya sonuna herhangi birşey eklemek(element,etiket,emoji...) istediğimizde "content: ' ' ;" kullanılabilir. Burada tırnaklar tek tırnaktır. Tırnaklar içine istediğimiz şeyi yazabiliriz. Örnek olarak emojilerin hekzadecimal kodları başına (\) getirilerek yazılmalıdır.

*     p::after {
*      content: "\261D";
*      font-size: 35px;
*      padding: 10px;
*    }

! Daha Fazla Örnek İçin MDN ::before , ::after sayfasını incele...



? ::selection --> Kullanıcının söz konusu yazıyı highlight yaptığında oluşacak stilleri uygular.
? İzin verilen propertyler: "color" , "background-color" , "text-decoration" and "text-shadow"

! ::first-line (:first-line) --> Blok eleman düzeyinde içeriğin ilk satırına stil uygulamada kullanılır.

? ::first-letter (:first-letter) --> Blok elemanların ilk satırının ilk harfine stil uygulamada kullanılır.Yalnızca önünde başka içerik (görüntüler veya satır içi tablolar gibi) olmadığında uygulanır.

*/
* {
  margin: 0;
  padding: 0;
}

button {
  background-color: #fffce8;
}

#login {
  background-color: #b8b42d;
}

span {
  color: #c9d6ea;
}

.tag {
  background-color: #e8f7ee;
  font-size: 12px;
}

a {
  color: red;
}

.post a {
  color: #b4869f;
}

footer a {
  color: blue;
}

input + button {
  background-color: pink;
}

h2 + button {
  font-size: 20px;
  background-color: magenta;
}
footer > a {
  color: green;
}
input[type='password'] {
  color: greenyellow;
}

a[href*='google' i] {
  color: magenta;
}

.post button:hover {
  background-color: #511730;
}
.post button:active {
  background-color: green;
}

a:hover {
  text-decoration: overline;
}

.post:nth-of-type(3n) {
  background-color: #e0d68a;
}

h2::first-letter {
  font-size: 50px;
}
h2::selection {
  background-color: #16c172;
}

::selection {
  background-color: yellow;
}

h1,
h2 {
  color: #f1faee;
}

h1,
h2 {
  color: bisque;
}

button:hover {
  background-color: olive;
  font-size: 30px;
}
